require 'bcrypt'
BCrypt::Engine.cost = 14

module SecretStore
  # This class models a secure password hash. It is a wrapper for BCrypt methods used in SecretStore.
  # SecretStore::Password does not interact directly with encryption or decryption and there is no
  # authentication or access control implemented here. Instead the password is used to
  # ensure that keys generated for encryption are synchronised to work from the same initial password
  # string.
  #
  # An instance of this class represents a single hashed password. Only the hash data is kept inside
  # the object.
  #
  class Password
    # The hashed password
    # @return [BCrypt::Password]
    attr_reader :password

    # Create new object from hash string
    # @param [String] hashed_password a serialised BCrypt string e.g. "$2a$14$RDZ2LU04FGZh0UHS8leW.OCD0/0UONUz.hobUOS2HKdgqdOqoA/gG"
    # @return [SecretStore::Password]
    def initialize hashed_password
      @password = BCrypt::Password.new( hashed_password.to_s )
    end

    # Whether or not the hashed password matches to a given plaintext password. This causes BCrypt
    # to calculate the hash of the supplied plaintext version, so this method is slow.
    # @param [String] plain_password a candidate match to the original password
    # @return [Boolean] true if there is a match, false otherwise
    def matches plain_password
      @password == plain_password
    end

    # Generates new SecretStore::Password from a given plaintext password. This causes BCrypt
    # to calculate the hash of the supplied plaintext version, so this method is slow.
    # @param [String] plain_password an original password to use in future matching
    # @return [SecretStore::Password] new object
    def self.create plain_password
      self.new( BCrypt::Password.create( plain_password ) )
    end

    # Serialise to a Hash. Inverse of .from_h
    # @return [Hash] serialised version of object
    def to_h
      Hash[
        :hashed_password => password.to_s
      ]
    end

    # De-serialise from a Hash. Inverse of .to_h
    # @param [Hash] h as generated by .to_h
    # @return [SecretStore::Password] new object
    def self.from_h h
      self.new( h[:hashed_password] )
    end
  end
end
